# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
import telebot
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
from telebot import types
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–æ–º
import os
from dotenv import load_dotenv
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
import random
# proxy socks5
from telebot import apihelper
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .json —Ñ–∞–π–ª–∞–º–∏
import json


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logging.getLogger("requests").setLevel(logging.WARNING)
# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
logging.info('Started')

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
env_path = '../.env'
# –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(dotenv_path=env_path)
token = os.getenv('DICE_TELEGRAM_TOKEN')

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(token)

# proxy socks5
# apihelper.proxy = {'https': 'socks5://723229931:RldoaIVa@orbtl.s5.opennetwork.cc:999'}
# apihelper.proxy = {'https': 'socks5://723229931:RldoaIVa@grsst.s5.opennetwork.cc:999'}
# apihelper.proxy = {'https': 'socks5://96.113.166.133:1080'}


ID = 0
HP = 1
WORD = 2
GUESS = 3
LETTERS = 4
CATEGORIES_PATH = 'categories.json'
CATEGORIES = {"ANIMALS": {"EN": 'Animals', "RU": '–ñ–∏–≤–æ—Ç–Ω—ã–µ'}, "EAT": {"EN": 'Eat', "RU": '–ï–¥–∞'},
              "HOUSE": {"EN": "House", "RU": "–î–æ–º"}, "CLOTHES": {"EN": "Clothes", "RU": "–í–µ—â–∏"},
              "SCHOOL": {"EN": "School", "RU": "–®–∫–æ–ª–∞"}, "MUSIC": {"EN": "Music", "RU": "–ú—É–∑—ã–∫–∞"},
              "PROFESSIONS": {"EN": "Professions", "RU": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏"}, "PC": {"EN": "PC", "RU": "–ö–æ–º–ø—å—é—Ç–µ—Ä"},
              "NATURE": {"EN": "Nature", "RU": "–ü—Ä–∏—Ä–æ–¥–∞"}, "SPORT": {"EN": "Sport", "RU": "–°–ø–æ—Ä—Ç"},
              "BODY": {"EN": "Body", "RU": "–ß–µ–ª–æ–≤–µ–∫"}}


# –ë–∫—É–≤—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
ABC = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split()
# –°–ø–∏—Å–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
players = []


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ \"–ò–≥—Ä–∞—Ç—å\"")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π   
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global players
    if message.text == "–ò–≥—Ä–∞—Ç—å" or message.text == "–∏–≥—Ä–∞—Ç—å" or message.text == "/play":
        if player_founder(message)[HP] == 0:
            players.remove(player_founder(message))
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            categories_words = [types.InlineKeyboardButton(text="–õ—é–±–∞—è", callback_data="All"),
                                types.InlineKeyboardButton(text="–ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="ANIMALS"),
                                types.InlineKeyboardButton(text="–ï–¥–∞", callback_data="EAT"),
                                types.InlineKeyboardButton(text="–î–æ–º", callback_data="HOUSE"),
                                types.InlineKeyboardButton(text="–û–¥–µ–∂–¥–∞", callback_data="CLOTHES"),
                                types.InlineKeyboardButton(text="–®–∫–æ–ª–∞", callback_data="SCHOOL"),
                                types.InlineKeyboardButton(text="–ú—É–∑—ã–∫–∞", callback_data="MUSIC"),
                                types.InlineKeyboardButton(text="–¢–µ–ª–æ", callback_data="BODY"),
                                types.InlineKeyboardButton(text="–°–ø–æ—Ä—Ç", callback_data="SPORT"),
                                types.InlineKeyboardButton(text="–ö–æ–º–ø—å—é—Ç–µ—Ä", callback_data="PC"),
                                types.InlineKeyboardButton(text="–ü—Ä–∏—Ä–æ–¥–∞", callback_data="NATURE"),
                                types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="PROFESSIONS")]
            keyboard.add(*categories_words)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, '–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, üö´ - –≤—ã—Ö–æ–¥')
            bot.send_message(message.chat.id, "–¢–µ–º–∞: " + player_founder(message)[5])
            letters_buttons(message)
    elif message.text in player_founder(message)[LETTERS]:
        # –ù–∞—Ö–æ–¥–∏ –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ players
        tmp_player = player_founder(message)
        # –£–¥–∞–ª–∏—Ç—å –±—É–∫–≤—É-–∫–Ω–æ–ø–∫—É
        tmp_player[LETTERS].remove(message.text)
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª
        if message.text in tmp_player[WORD]:
            guess_changer(message)
            if tmp_player[WORD] == tmp_player[GUESS]:
                keyboard = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–¢—ã –≤—ã–∏–≥—Ä–∞–ª ü•≥', reply_markup=keyboard)
                bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ - ' + ''.join(tmp_player[WORD]))
                players.remove(tmp_player)
            else:
                letters_buttons(message)
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—à–∏–±—Å—è
        else:
            if tmp_player[HP] <= 1:
                keyboard = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, 'üíÄ')
                bot.send_message(message.chat.id, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üòû', reply_markup=keyboard)
                bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ - ' + ''.join(tmp_player[WORD]))
                players.remove(tmp_player)
            else:
                tmp_player[HP] -= 1
                letters_buttons(message)
    elif message.text == "üö´Ô∏è":
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, '–í—ã—Ö–æ–¥', reply_markup=keyboard)
        players.remove(player_founder(message))
    else:
        print(message.text)


@bot.callback_query_handler(func=lambda call: True)
def get_callback(call):
    # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è " "

    if call.data == "All":
        call.data = random.choice(CATEGORIES)

    if call.data in CATEGORIES:
        with open(CATEGORIES_PATH, "r", encoding="utf8") as read:
            word = list(random.choice(json.load(read)[call.data]))
            new_player(call.message, word, CATEGORIES[call.data]['RU'])


def new_player(message, word, theme):
    if player_founder(message)[HP] == 0:
        players.remove(player_founder(message))

        hp = 6
        guess = []
        letters = list(ABC)

        for i in range(0, len(word)):
            if not word[i] == '_':
                guess.append("_")
            else:
                guess.append(" ")
                word[i] = ' '

        print(' '.join(word))
        print(' '.join(guess))

        player = [message.chat.id, hp, word, guess, letters, theme]
        # ID - 0, HP - 1, WORD - 2, GUESS - 3, LETTERS - 4
        bot.send_message(message.chat.id, "–¢–µ–º–∞: " + theme)

        players.append(player)
    else:
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, üö´ - –≤—ã—Ö–æ–¥')
        bot.send_message(message.chat.id, "–¢–µ–º–∞: " + player_founder(message)[5])
    letters_buttons(message)


# –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
def player_founder(message):
    while True:
        for player in players:
            if player[ID] == message.chat.id:
                return player
        players.append([message.chat.id, 0, [], [], []])
        print("Err")


# <3
def hp_visual(message):
    hp = player_founder(message)[HP]
    if hp > 0:
        with open('categories.json', "r", encoding="utf8") as read:
            if hp == 6:
                bot.send_message(message.chat.id, json.load(read)["FIRST_POSITION"])
            elif hp == 5:
                bot.send_message(message.chat.id, json.load(read)["SECOND_POSITION"])
            elif hp == 4:
                bot.send_message(message.chat.id, json.load(read)["THIRD_POSITION"])
            elif hp == 3:
                bot.send_message(message.chat.id, json.load(read)["FOURTH_POSITION"])
            elif hp == 2:
                bot.send_message(message.chat.id, json.load(read)["FIFTH_POSITION"])
            elif hp == 1:
                bot.send_message(message.chat.id, json.load(read)["SIXTH_POSITION"])

        tmp = []
        i = 1
        while i <= 6:
            tmp.append('[')
            if hp >= i:
                tmp.append('‚ù§Ô∏è')
            else:
                tmp.append('üñ§')
            tmp.append('] ')
            i += 1
        bot.send_message(message.chat.id, ''.join(tmp))


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã
def letters_buttons(message):
    # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(row_width=7)
    # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons_added = []
    # –ò –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ—ë –∫–Ω–æ–ø–∫–∏
    for letter in player_founder(message)[LETTERS]:
        tmp = types.KeyboardButton(letter)
        buttons_added.append(tmp)
    keyboard.add(*buttons_added, types.KeyboardButton("üö´Ô∏è"))
    hp_visual(message)
    if not buttons_added == []:
        bot.send_message(message.chat.id, ' '.join(player_founder(message)[GUESS]), reply_markup=keyboard)


# –ö–æ–º—É —è –≤–æ–æ–±—â–µ –≤—Å—ë —ç—Ç–æ –ø–∏—à—É?
def guess_changer(message):
    tmp_player = player_founder(message)
    for i in range(0, len(tmp_player[WORD])):
        if message.text == tmp_player[WORD][i]:
            tmp_player[GUESS][i] = message.text


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
bot.polling(none_stop=True, interval=0)

# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.info('Finished')
